import 'dart:convert';
import 'dart:async';
import 'dart:io';

import 'package:scoped_model/scoped_model.dart';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import 'package:rxdart/subjects.dart';
import 'package:mime/mime.dart';
import 'package:http_parser/http_parser.dart';

import '../models/user.dart';
import '../models/auth.dart';

mixin ConnectedItemsModel on Model {
  String selectedItemId;
  User authenticatedUser;
  bool loading = false;

  void selectItem(String itemId) {
    selectedItemId = itemId;
    if (itemId != null) {
      notifyListeners();
    }
  }

  Future<Map<String, dynamic>> uploadImage(File image,
      {String imagePath}) async {
    final mimeTypeData = lookupMimeType(image.path).split('/');
    final imageUploadRequest = http.MultipartRequest(
        'POST',
        Uri.parse(
            'https://us-central1-flutter-buy.cloudfunctions.net/storeImage'));
    final file = await http.MultipartFile.fromPath(
      'image',
      image.path,
      contentType: MediaType(
        mimeTypeData[0],
        mimeTypeData[1],
      ),
    );
    imageUploadRequest.files.add(file);
    if (imagePath != null) {
      imageUploadRequest.fields['imagePath'] = Uri.encodeComponent(imagePath);
    }
    imageUploadRequest.headers['Authorization'] =
        'Bearer ${authenticatedUser.id}';

    try {
      final streamedResponse = await imageUploadRequest.send();
      final response = await http.Response.fromStream(streamedResponse);
      if (response.statusCode != 200 && response.statusCode != 201) {
        print('Something went wrong with 1st image');
        print(json.decode(response.body));
        return null;
      }
      final responseData = json.decode(response.body);
      return responseData;
    } catch (error) {
      print(error);
      return null;
    }
  }
}

mixin UserModel on ConnectedItemsModel {
 // Timer _authTimer;
  PublishSubject<bool> _userSubject = PublishSubject();

  User get user {
    return authenticatedUser;
  }

  PublishSubject<bool> get userSubject {
    return _userSubject;
  }

  Future<Map<String, dynamic>> authenticate(String email, String password,
      [AuthMode mode = AuthMode.Login]) async {
    loading = true;
    notifyListeners();
    final Map<String, dynamic> authData = {
      'email': email,
      'password': password,
      'returnSecureToken': true
    };
    http.Response response;
    if (mode == AuthMode.Login) {
      response = await http.post(
        'https://www.googleapis.com/identitytoolkit/v3/relyingparty/verifyPassword?key=AIzaSyB-YdS_0ucETH_2rbkgz1L6oqHFOiemGqQ',
        body: json.encode(authData),
        headers: {'Content-Type': 'application/json'},
      );
    } else {
      response = await http.post(
        'https://www.googleapis.com/identitytoolkit/v3/relyingparty/signupNewUser?key=AIzaSyB-YdS_0ucETH_2rbkgz1L6oqHFOiemGqQ',
        body: json.encode(authData),
        headers: {'Content-Type': 'application/json'},
      );
    }

    final Map<String, dynamic> responseData = json.decode(response.body);
    bool hasError = true;
    String message = 'Ooops, Something went wrong';
    if (responseData.containsKey('localId')) {
      hasError = false;
      message = 'Authentication Successful!';
      authenticatedUser = User(
          id: responseData['localId'],
          email: email,
          token: responseData[
              'idToken']); //token generated by the server to the user for sessions
      //setAuthTimeout(int.parse(responseData['expiresIn']));
      _userSubject.add(true);
      //final now = DateTime.now();
      // final DateTime expiryTime =
      //     now.add(Duration(seconds: int.parse(responseData['expiresIn'])));
      final SharedPreferences prefs = await SharedPreferences.getInstance();
      // prefs.setString(
      //     'token', responseData['idToken']); //this token is saved on the device
      prefs.setString('userEmail', email);
      prefs.setString('userId', responseData['localId']);
      //prefs.setString('expiryTime', expiryTime.toIso8601String());
    } else if (responseData['error']['message'] == 'EMAIL_EXISTS') {
      message = 'This email already exists';
    } else if (responseData['error']['message'] == 'EMAIL_NOT_FOUND') {
      message = 'This Email was not found';
    } else if (responseData['error']['message'] == 'INVALID_PASSWORD') {
      message = 'Invalid Password';
    } else if (responseData['error']['message'] == 'USER_DISABLED') {
      message = 'Account is Disabled';
    }
    loading = false;
    notifyListeners();
    return {'success': !hasError, 'message': message};
  }

  void autoAuthenticate() async {
    final SharedPreferences prefs = await SharedPreferences.getInstance();
    final String userId = prefs.getString('userId');

    //final String token = prefs.getString('token');
    //final String expiryTimeString = prefs.getString('expiryTime');
     if (userId != null) {
    //   final DateTime now = DateTime.now();
    //   final parsedExpiryTime = DateTime.parse(expiryTimeString);
    //   if (parsedExpiryTime.isBefore(now)) {
    //     authenticatedUser = null;
    //     notifyListeners();
    //     return; //will not execute the next lines of code
    //   }
      final String userEmail = prefs.getString('userEmail');
      //final int tokenLifespan = parsedExpiryTime.difference(now).inSeconds;
      authenticatedUser = User(id: userId, email: userEmail);
      _userSubject.add(true);
      //setAuthTimeout(tokenLifespan); //timer for remaining token time
      notifyListeners();
    }
  }

  void logout() async {
    authenticatedUser = null;
    // _authTimer
    //     .cancel(); // clear/cancel the existing token timer when a user logs out
    _userSubject.add(false); //do not authenticate/auto_authenticate
    selectedItemId = null;
    final SharedPreferences prefs = await SharedPreferences.getInstance();
   // prefs.remove('token');
    prefs.remove('userEmail');
    prefs.remove('userId');
  }

  // void setAuthTimeout(int time) {
  //   _authTimer = Timer(Duration(days: time * 60), logout);
  //   //Timer(Duration(seconds: time), logout) seconds for app to logout, can be changed to days
  //   //multiply time with and integer to increase time eg. time * 10
  // }
}

mixin UtilityModel on ConnectedItemsModel {
  bool get isLoading {
    return loading;
  }
}
